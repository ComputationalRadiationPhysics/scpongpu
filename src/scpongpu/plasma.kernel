#include <cmath> // actually just CUDA Math 
#include "vector.hpp"
#include "parameters.hpp"
#include "utilities.hpp"

#pragma once

/* declare force functions: */
__forceinline__ __device__ vec ext_force(const vec& location, const vec& speed);
__forceinline__ __device__  vec coulomb_force(const vec& loc1, const vec& loc2);


/**
 * compute the acceleration for the next time step
 */
#if __CUDA_ARCH__ >= 200
__launch_bounds__(parameters::blocksize, parameters::min_blockspermp)
#endif
__global__ void next_accel(vec* location, vec* speed, vec* accel ,const int N_particle, 
				const numtype delta)
{
  /* compute parallelization index */
  const int thread_id = threadIdx.x; 
  const int blockindex = parameters::blocksize * blockIdx.x;
  const int index = blockindex + thread_id;
 
  /* use shared memory for location to efficiently read positions of other 
   * particles to compute the Coulomb force */
  __shared__ vec location_s[parameters::blocksize]; /* allocate shared memory */
  location_s[thread_id] = location[index]; /* fill data */
  /* TODO: is this read process here necessary - reading is done below */
  vec my_location = location_s[thread_id]; /* put own position into register */
  __syncthreads(); /* wait till location_s is filled by all threads */

  /* memory for acceleration */
  vec a_t0;  /* initializes as  (0,0,0) */
  
  /* compute Coulomb forces: */
  for(int read_block = 0; read_block<N_particle/parameters::blocksize; ++read_block)
    {
      /* load particle data blockwise */
      location_s[thread_id] = location[(index + read_block*parameters::blocksize)%N_particle]; 
      __syncthreads(); /* wait till all treads are done loading */
      /* compute forces due to particles in loaded block */
      for(int i =0; i<parameters::blocksize; ++i) 
        {
          /* add acceleration due to each particle
           * if own position is read -> force=0 due to Yukawa potential */
          a_t0 += coulomb_force(my_location, location_s[i]); 
        }
      __syncthreads(); /* wait till all threads are done reading */
    }

  /* store Coulomb force globally */
  accel[index] = a_t0; 
}
  

/**
 * first half of velocity verlet algorithm
 */
#if __CUDA_ARCH__ >= 200
__launch_bounds__(parameters::blocksize, parameters::min_blockspermp)
#endif
__global__ void next_step_1(vec* location, vec* speed, vec* accel, const int N_particle, 
				const numtype delta)
{
  /* compute parallelization index - 1 index = 1 particle */
  const int index = parameters::blocksize * blockIdx.x + threadIdx.x; 

  /* put particle data into register */
  vec my_location = location[index]; 
  vec my_speed = speed[index]; 
  /* add external forces to Coulomb force */
  const vec a_t0 = accel[index] + ext_force(my_location, my_speed); 

  /* propagate/push first 1/2 time step */
  my_speed     +=  a_t0 * (0.5f*delta);  
  my_location  +=  my_speed*delta;
      
  /* store new data in global memory */
  location[index] = my_location;  
  speed[index] = my_speed;  
    
  __syncthreads(); /* not quite sure if really necessary */
}


/**
 * second half of velocity verlet algorithm
 */
#if __CUDA_ARCH__ >= 200
__launch_bounds__(parameters::blocksize, parameters::min_blockspermp)
#endif
__global__ void next_step_2(vec* location, vec* speed, vec* accel, const int N_particle, 
				const numtype delta)
{
  /* compute parallelization index - 1 index = 1 particle */
  const int index = parameters::blocksize * blockIdx.x + threadIdx.x; 
  
  /* put particle data into register */
  vec my_location = location[index]; 
  vec my_speed = speed[index]; 
  /* add external forces to Coulomb force */
  const vec a_t0 = accel[index] + ext_force(my_location, my_speed); 

  /* propagate/push second 1/2 time step */
  my_speed += a_t0 *(0.5f*delta);  
  speed[index] = my_speed; 
  /* no change of location in this second part */

  __syncthreads(); /* not quite sure if really necessary */
}


/**
 * compute harmonic and friction forces
 */
__forceinline__ __device__ vec ext_force(const vec& location, const vec& speed)
{
  /* for easier handling use short name - not contributing to register */
  const numtype harmonic_x = parameters::harmonic_x;
  const numtype harmonic_y = parameters::harmonic_y;
  const numtype harmonic_z = parameters::harmonic_z;
  const numtype friction = parameters::friction;

  /* return both return force in harmonic potential and friction force */
  return vec(-1.0f*location.x*harmonic_x, 
             -1.0f*location.y*harmonic_y, 
             -1.0f*location.z*harmonic_z) 
         + speed*(-1.0f*friction);
}


/**
 * formula to compute  Coulomb force
 */
__forceinline__ __device__  vec coulomb_force(const vec& loc1, const vec& loc2)
{
  /* for easier handling use short name - not contributing to register */
  const numtype coulomb = parameters::coulomb; 
  const numtype epsilon = parameters::epsilon_yukawa; 
  /* distance between two particles */
  const vec difference = (loc1-loc2);

  /* used here: Yukawa potential to deal with overlaying particles */
  return difference *
    (coulomb / (util::cube(sqrt( util::square(difference.x) + 
                                 util::square(difference.y) + 
                                 util::square(difference.z) + 
                                 epsilon ))) );
}

